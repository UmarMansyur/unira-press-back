// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Type {
  ADMIN
  USER
}

model Pengguna {
  id                 Int              @id @default(autoincrement())
  username           String           @unique @db.VarChar(200)
  password           String           @db.VarChar(200)
  nama               String           @db.VarChar(200)
  email              String           @unique @db.VarChar(200)
  thumbnail          String?          @db.VarChar(200)
  type               Type             @default(USER)
  phone              String?          @unique @db.VarChar(13)
  is_simat           Boolean          @default(false)
  has_verified_email Boolean          @default(false)
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt
  UserPrivillege     UserPrivillege[]
  News               News[]
  Book_designer      Book[]           @relation("book_designer")
  Book_editor        Book[]           @relation("book_editor")
  Book_layouter      Book[]           @relation("book_layouter")
  Book               Book[]           @relation("book_proofreader")
  PengajuanBuku      PengajuanBuku[]
  RevisiNaskah       RevisiNaskah[]
  Invoice            Invoice[]

  @@map("pengguna")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(100)

  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  UserPrivillege UserPrivillege[]

  @@map("role")
}

model UserPrivillege {
  id       Int      @id @default(autoincrement())
  pengguna Pengguna @relation(fields: [user_id], references: [id])
  user_id  Int
  role     Role     @relation(fields: [role_id], references: [id])
  role_id  Int

  @@map("hak_akses_pengguna")
}

model News {
  id              Int      @id @default(autoincrement())
  judul_berita    String   @db.VarChar(200)
  isi             String   @db.Text
  cover           String   @db.VarChar(200)
  dilihat         Int      @default(0)
  penulis         Pengguna @relation(fields: [penulis_id], references: [id])
  penulis_id      Int
  tanggal_publish DateTime @default(now())

  @@map("news")
}

model BookCategory {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(100)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Book       Book[]

  @@map("kategori_buku")
}

model Book {
  id                Int                @id @default(autoincrement())
  kategori_buku     BookCategory       @relation(fields: [kategori_buku_id], references: [id])
  kategori_buku_id  Int
  layouter          Pengguna           @relation("book_layouter", fields: [layouter_id], references: [id])
  layouter_id       Int
  proofreader       Pengguna           @relation("book_proofreader", fields: [proofreader_id], references: [id])
  proofreader_id    Int
  editor            Pengguna           @relation("book_editor", fields: [editor_id], references: [id])
  editor_id         Int
  desainer          Pengguna           @relation("book_designer", fields: [desainer_id], references: [id])
  desainer_id       Int
  pengarang         String             @db.VarChar(200)
  judul             String             @db.VarChar(200)
  sinopsis          String             @db.Text
  file_cover        String?            @db.VarChar(200)
  tipe_identifikasi IdentificationType
  isbn              String?            @unique @db.VarChar(200)
  jumlah_halaman    Int
  ukuran            String             @db.VarChar(200)
  tanggal_pengajuan DateTime           @default(now())
  tanggal_publish   DateTime
  harga             Int?
  tipe_kepenulisan  TypeWriting
  penanggung_jawab  String             @db.VarChar(200)
  tahun_terbit      Int
  dilihat           Int                @default(0)
  PengajuanISBN     PengajuanISBN[]
  PengajuanBuku     PengajuanBuku[]
  FileNaskah        FileNaskah[]
  Invoice           Invoice[]
}

enum TypeWriting {
  fiksi
  non_fiksi
}

enum IdentificationType {
  ISBN
  QRCBN
  hanya_cetak
}

model PengajuanISBN {
  id      Int    @id @default(autoincrement())
  buku    Book   @relation(fields: [buku_id], references: [id])
  buku_id Int
  status  Status
}

enum Status {
  proses
  permohonan_revisi
  ditolak
  isbn_diterbitkan
}

model PengajuanBuku {
  id               Int             @id @default(autoincrement())
  buku             Book            @relation(fields: [buku_id], references: [id])
  buku_id          Int
  pengguna         Pengguna        @relation(fields: [pengguna_id], references: [id])
  pengguna_id      Int
  status_pengajuan StatusPengajuan
  alasan_penolakan String?         @db.Text
  tanggal_ditolak  DateTime?
  tanggal_diterima DateTime?
  tanggal_revisi   DateTime?
  tanggal_proses   DateTime?
  tanggal_cetak    DateTime?
  tanggal_terbit   DateTime?
  RevisiNaskah     RevisiNaskah[]
}

enum StatusPengajuan {
  ditolak
  diterima_untuk_ditinjau
  revisi
  proses_cetak
  diterbitkan
}

model FileNaskah {
  id          Int    @id @default(autoincrement())
  buku        Book   @relation(fields: [buku_id], references: [id])
  buku_id     Int
  file_naskah String @db.VarChar(200)
}

model RevisiNaskah {
  id                Int           @id @default(autoincrement())
  pengajuan_buku    PengajuanBuku @relation(fields: [pengajuan_buku_id], references: [id])
  pengajuan_buku_id Int
  pengguna          Pengguna      @relation(fields: [pengguna_id], references: [id])
  pengguna_id       Int
  is_editor         Boolean
}

model Invoice {
  id               Int           @id @default(autoincrement())
  pengguna         Pengguna      @relation(fields: [pengguna_id], references: [id])
  pengguna_id      Int
  buku             Book          @relation(fields: [buku_id], references: [id])
  buku_id          Int
  total_pembayaran Int
  status           StatusInvoice
  tanggal_bayar    DateTime
}

enum StatusInvoice {
  belum_dibayar
  sudah_dibayar
  gagal
}
